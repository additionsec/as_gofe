// Code generated by protoc-gen-go. DO NOT EDIT.
// source: addsec_cti.proto

/*
Package addsec_cti is a generated protocol buffer package.

It is generated from these files:
	addsec_cti.proto

It has these top-level messages:
	ObservationData
	Sighting
	Report
*/
package asfe

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ObservationData_DataType int32

const (
	ObservationData_DataTypeUnknown         ObservationData_DataType = 0
	ObservationData_DataTypeHashMD5         ObservationData_DataType = 1
	ObservationData_DataTypeHashSHA1        ObservationData_DataType = 2
	ObservationData_DataTypeHashSHA256      ObservationData_DataType = 3
	ObservationData_DataTypeHashAS1         ObservationData_DataType = 4
	ObservationData_DataTypeHashAS2         ObservationData_DataType = 5
	ObservationData_DataTypeCVE             ObservationData_DataType = 6
	ObservationData_DataTypeVersionString   ObservationData_DataType = 7
	ObservationData_DataTypeModelString     ObservationData_DataType = 8
	ObservationData_DataTypeASLibVersion    ObservationData_DataType = 9
	ObservationData_DataTypeFile            ObservationData_DataType = 10
	ObservationData_DataTypeX509            ObservationData_DataType = 11
	ObservationData_DataTypeX509Subject     ObservationData_DataType = 12
	ObservationData_DataTypeX509Issuer      ObservationData_DataType = 13
	ObservationData_DataTypeUsername        ObservationData_DataType = 14
	ObservationData_DataTypeProcess         ObservationData_DataType = 15
	ObservationData_DataTypeCommand         ObservationData_DataType = 16
	ObservationData_DataTypeApplication     ObservationData_DataType = 17
	ObservationData_DataTypeString          ObservationData_DataType = 18
	ObservationData_DataTypeNumber          ObservationData_DataType = 19
	ObservationData_DataTypeIPv4            ObservationData_DataType = 20
	ObservationData_DataTypeIPv6            ObservationData_DataType = 21
	ObservationData_DataTypePort            ObservationData_DataType = 22
	ObservationData_DataTypeHostname        ObservationData_DataType = 23
	ObservationData_DataTypeMAC             ObservationData_DataType = 24
	ObservationData_DataTypeASConfTimestamp ObservationData_DataType = 25
	ObservationData_DataTypeASDefVersion    ObservationData_DataType = 26
	ObservationData_DataTypeHPKP            ObservationData_DataType = 27
	ObservationData_DataTypeVendorRefID     ObservationData_DataType = 28
	ObservationData_DataTypeEnvString       ObservationData_DataType = 29
	ObservationData_DataTypeSymbolString    ObservationData_DataType = 30
	ObservationData_DataTypePropertyName    ObservationData_DataType = 31
	ObservationData_DataTypeLibrary         ObservationData_DataType = 32
	ObservationData_DataTypeSSID            ObservationData_DataType = 33
	ObservationData_DataTypeBSSID           ObservationData_DataType = 34
	ObservationData_DataTypeSystemID        ObservationData_DataType = 35
	ObservationData_DataTypeNativePointer   ObservationData_DataType = 36
	ObservationData_DataTypeNativeInt       ObservationData_DataType = 37
)

var ObservationData_DataType_name = map[int32]string{
	0:  "DataTypeUnknown",
	1:  "DataTypeHashMD5",
	2:  "DataTypeHashSHA1",
	3:  "DataTypeHashSHA256",
	4:  "DataTypeHashAS1",
	5:  "DataTypeHashAS2",
	6:  "DataTypeCVE",
	7:  "DataTypeVersionString",
	8:  "DataTypeModelString",
	9:  "DataTypeASLibVersion",
	10: "DataTypeFile",
	11: "DataTypeX509",
	12: "DataTypeX509Subject",
	13: "DataTypeX509Issuer",
	14: "DataTypeUsername",
	15: "DataTypeProcess",
	16: "DataTypeCommand",
	17: "DataTypeApplication",
	18: "DataTypeString",
	19: "DataTypeNumber",
	20: "DataTypeIPv4",
	21: "DataTypeIPv6",
	22: "DataTypePort",
	23: "DataTypeHostname",
	24: "DataTypeMAC",
	25: "DataTypeASConfTimestamp",
	26: "DataTypeASDefVersion",
	27: "DataTypeHPKP",
	28: "DataTypeVendorRefID",
	29: "DataTypeEnvString",
	30: "DataTypeSymbolString",
	31: "DataTypePropertyName",
	32: "DataTypeLibrary",
	33: "DataTypeSSID",
	34: "DataTypeBSSID",
	35: "DataTypeSystemID",
	36: "DataTypeNativePointer",
	37: "DataTypeNativeInt",
}
var ObservationData_DataType_value = map[string]int32{
	"DataTypeUnknown":         0,
	"DataTypeHashMD5":         1,
	"DataTypeHashSHA1":        2,
	"DataTypeHashSHA256":      3,
	"DataTypeHashAS1":         4,
	"DataTypeHashAS2":         5,
	"DataTypeCVE":             6,
	"DataTypeVersionString":   7,
	"DataTypeModelString":     8,
	"DataTypeASLibVersion":    9,
	"DataTypeFile":            10,
	"DataTypeX509":            11,
	"DataTypeX509Subject":     12,
	"DataTypeX509Issuer":      13,
	"DataTypeUsername":        14,
	"DataTypeProcess":         15,
	"DataTypeCommand":         16,
	"DataTypeApplication":     17,
	"DataTypeString":          18,
	"DataTypeNumber":          19,
	"DataTypeIPv4":            20,
	"DataTypeIPv6":            21,
	"DataTypePort":            22,
	"DataTypeHostname":        23,
	"DataTypeMAC":             24,
	"DataTypeASConfTimestamp": 25,
	"DataTypeASDefVersion":    26,
	"DataTypeHPKP":            27,
	"DataTypeVendorRefID":     28,
	"DataTypeEnvString":       29,
	"DataTypeSymbolString":    30,
	"DataTypePropertyName":    31,
	"DataTypeLibrary":         32,
	"DataTypeSSID":            33,
	"DataTypeBSSID":           34,
	"DataTypeSystemID":        35,
	"DataTypeNativePointer":   36,
	"DataTypeNativeInt":       37,
}

func (x ObservationData_DataType) Enum() *ObservationData_DataType {
	p := new(ObservationData_DataType)
	*p = x
	return p
}
func (x ObservationData_DataType) String() string {
	return proto.EnumName(ObservationData_DataType_name, int32(x))
}
func (x *ObservationData_DataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(ObservationData_DataType_value, data, "ObservationData_DataType")
	if err != nil {
		return err
	}
	*x = ObservationData_DataType(value)
	return nil
}
func (ObservationData_DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

type Sighting_SightingType int32

const (
	Sighting_SightingTypeUnknown                    Sighting_SightingType = 0
	Sighting_SightingTypeInformational              Sighting_SightingType = 1
	Sighting_SightingTypeSystemCharacteristics      Sighting_SightingType = 2
	Sighting_SightingTypeApplicationCharacteristics Sighting_SightingType = 3
	Sighting_SightingTypeMalwareArtifacts           Sighting_SightingType = 4
	Sighting_SightingTypeNetworkAttack              Sighting_SightingType = 5
	Sighting_SightingTypeUserBehavior               Sighting_SightingType = 6
	Sighting_SightingTypeCompliance                 Sighting_SightingType = 7
	Sighting_SightingTypeCustomerData               Sighting_SightingType = 8
)

var Sighting_SightingType_name = map[int32]string{
	0: "SightingTypeUnknown",
	1: "SightingTypeInformational",
	2: "SightingTypeSystemCharacteristics",
	3: "SightingTypeApplicationCharacteristics",
	4: "SightingTypeMalwareArtifacts",
	5: "SightingTypeNetworkAttack",
	6: "SightingTypeUserBehavior",
	7: "SightingTypeCompliance",
	8: "SightingTypeCustomerData",
}
var Sighting_SightingType_value = map[string]int32{
	"SightingTypeUnknown":                    0,
	"SightingTypeInformational":              1,
	"SightingTypeSystemCharacteristics":      2,
	"SightingTypeApplicationCharacteristics": 3,
	"SightingTypeMalwareArtifacts":           4,
	"SightingTypeNetworkAttack":              5,
	"SightingTypeUserBehavior":               6,
	"SightingTypeCompliance":                 7,
	"SightingTypeCustomerData":               8,
}

func (x Sighting_SightingType) Enum() *Sighting_SightingType {
	p := new(Sighting_SightingType)
	*p = x
	return p
}
func (x Sighting_SightingType) String() string {
	return proto.EnumName(Sighting_SightingType_name, int32(x))
}
func (x *Sighting_SightingType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Sighting_SightingType_value, data, "Sighting_SightingType")
	if err != nil {
		return err
	}
	*x = Sighting_SightingType(value)
	return nil
}
func (Sighting_SightingType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type Sighting_SightingConfidence int32

const (
	Sighting_SightingConfidenceUnknown Sighting_SightingConfidence = 0
	Sighting_SightingConfidenceLow     Sighting_SightingConfidence = 1
	Sighting_SightingConfidenceMedium  Sighting_SightingConfidence = 2
	Sighting_SightingConfidenceHigh    Sighting_SightingConfidence = 3
)

var Sighting_SightingConfidence_name = map[int32]string{
	0: "SightingConfidenceUnknown",
	1: "SightingConfidenceLow",
	2: "SightingConfidenceMedium",
	3: "SightingConfidenceHigh",
}
var Sighting_SightingConfidence_value = map[string]int32{
	"SightingConfidenceUnknown": 0,
	"SightingConfidenceLow":     1,
	"SightingConfidenceMedium":  2,
	"SightingConfidenceHigh":    3,
}

func (x Sighting_SightingConfidence) Enum() *Sighting_SightingConfidence {
	p := new(Sighting_SightingConfidence)
	*p = x
	return p
}
func (x Sighting_SightingConfidence) String() string {
	return proto.EnumName(Sighting_SightingConfidence_name, int32(x))
}
func (x *Sighting_SightingConfidence) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Sighting_SightingConfidence_value, data, "Sighting_SightingConfidence")
	if err != nil {
		return err
	}
	*x = Sighting_SightingConfidence(value)
	return nil
}
func (Sighting_SightingConfidence) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor0, []int{1, 1}
}

type Sighting_SightingImpact int32

const (
	Sighting_SightingImpactUnknown  Sighting_SightingImpact = 0
	Sighting_SightingImpactNone     Sighting_SightingImpact = 1
	Sighting_SightingImpactMinor    Sighting_SightingImpact = 2
	Sighting_SightingImpactModerate Sighting_SightingImpact = 3
	Sighting_SightingImpactMajor    Sighting_SightingImpact = 4
)

var Sighting_SightingImpact_name = map[int32]string{
	0: "SightingImpactUnknown",
	1: "SightingImpactNone",
	2: "SightingImpactMinor",
	3: "SightingImpactModerate",
	4: "SightingImpactMajor",
}
var Sighting_SightingImpact_value = map[string]int32{
	"SightingImpactUnknown":  0,
	"SightingImpactNone":     1,
	"SightingImpactMinor":    2,
	"SightingImpactModerate": 3,
	"SightingImpactMajor":    4,
}

func (x Sighting_SightingImpact) Enum() *Sighting_SightingImpact {
	p := new(Sighting_SightingImpact)
	*p = x
	return p
}
func (x Sighting_SightingImpact) String() string {
	return proto.EnumName(Sighting_SightingImpact_name, int32(x))
}
func (x *Sighting_SightingImpact) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Sighting_SightingImpact_value, data, "Sighting_SightingImpact")
	if err != nil {
		return err
	}
	*x = Sighting_SightingImpact(value)
	return nil
}
func (Sighting_SightingImpact) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 2} }

type Report_SystemType int32

const (
	Report_SystemTypeUnknown       Report_SystemType = 0
	Report_SystemTypeIOS           Report_SystemType = 1
	Report_SystemTypeAndroid       Report_SystemType = 2
	Report_SystemTypeWindowsMobile Report_SystemType = 3
	Report_SystemTypeBlackberry    Report_SystemType = 4
	Report_SystemTypeAmazonMobile  Report_SystemType = 5
	Report_SystemTypeOSX           Report_SystemType = 6
	Report_SystemTypeLinux         Report_SystemType = 7
	Report_SystemTypeWindows       Report_SystemType = 8
	Report_SystemTypeBSD           Report_SystemType = 9
	Report_SystemTypeEmbeddedLinux Report_SystemType = 10
	Report_SystemTypeIOT           Report_SystemType = 11
	Report_SystemTypeNetworkDevice Report_SystemType = 12
)

var Report_SystemType_name = map[int32]string{
	0:  "SystemTypeUnknown",
	1:  "SystemTypeIOS",
	2:  "SystemTypeAndroid",
	3:  "SystemTypeWindowsMobile",
	4:  "SystemTypeBlackberry",
	5:  "SystemTypeAmazonMobile",
	6:  "SystemTypeOSX",
	7:  "SystemTypeLinux",
	8:  "SystemTypeWindows",
	9:  "SystemTypeBSD",
	10: "SystemTypeEmbeddedLinux",
	11: "SystemTypeIOT",
	12: "SystemTypeNetworkDevice",
}
var Report_SystemType_value = map[string]int32{
	"SystemTypeUnknown":       0,
	"SystemTypeIOS":           1,
	"SystemTypeAndroid":       2,
	"SystemTypeWindowsMobile": 3,
	"SystemTypeBlackberry":    4,
	"SystemTypeAmazonMobile":  5,
	"SystemTypeOSX":           6,
	"SystemTypeLinux":         7,
	"SystemTypeWindows":       8,
	"SystemTypeBSD":           9,
	"SystemTypeEmbeddedLinux": 10,
	"SystemTypeIOT":           11,
	"SystemTypeNetworkDevice": 12,
}

func (x Report_SystemType) Enum() *Report_SystemType {
	p := new(Report_SystemType)
	*p = x
	return p
}
func (x Report_SystemType) String() string {
	return proto.EnumName(Report_SystemType_name, int32(x))
}
func (x *Report_SystemType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Report_SystemType_value, data, "Report_SystemType")
	if err != nil {
		return err
	}
	*x = Report_SystemType(value)
	return nil
}
func (Report_SystemType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

type ObservationData struct {
	// required DataType dataType = 1 [ default = DataTypeUnknown ];
	DataType         *uint32 `protobuf:"varint,1,opt,name=dataType,def=0" json:"dataType,omitempty"`
	Data             []byte  `protobuf:"bytes,2,opt,name=data" json:"data,omitempty"`
	Num              *uint32 `protobuf:"varint,3,opt,name=num" json:"num,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ObservationData) Reset()                    { *m = ObservationData{} }
func (m *ObservationData) String() string            { return proto.CompactTextString(m) }
func (*ObservationData) ProtoMessage()               {}
func (*ObservationData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

const Default_ObservationData_DataType uint32 = 0

func (m *ObservationData) GetDataType() uint32 {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return Default_ObservationData_DataType
}

func (m *ObservationData) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *ObservationData) GetNum() uint32 {
	if m != nil && m.Num != nil {
		return *m.Num
	}
	return 0
}

type Sighting struct {
	// See above note about enum vs int.
	// required SightingType sightingType = 1 [ default = SightingTypeUnknown ];
	SightingType *uint32 `protobuf:"varint,1,opt,name=sightingType,def=0" json:"sightingType,omitempty"`
	Timestamp    *uint32 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	TimeDelta    *uint32 `protobuf:"varint,8,opt,name=timeDelta" json:"timeDelta,omitempty"`
	// See above note about enum vs int.
	// optional SightingConfidence confidence = 3 [ default = SightingConfidenceUnknown ];
	Confidence *uint32 `protobuf:"varint,3,opt,name=confidence,def=0" json:"confidence,omitempty"`
	// optional SightingImpact impact = 4 [ default = SightingImpactUnknown ];
	Impact           *uint32            `protobuf:"varint,4,opt,name=impact,def=0" json:"impact,omitempty"`
	Datas            []*ObservationData `protobuf:"bytes,5,rep,name=datas" json:"datas,omitempty"`
	TestId           *uint32            `protobuf:"varint,6,opt,name=testId" json:"testId,omitempty"`
	TestSubId        *uint32            `protobuf:"varint,7,opt,name=testSubId" json:"testSubId,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *Sighting) Reset()                    { *m = Sighting{} }
func (m *Sighting) String() string            { return proto.CompactTextString(m) }
func (*Sighting) ProtoMessage()               {}
func (*Sighting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

const Default_Sighting_SightingType uint32 = 0
const Default_Sighting_Confidence uint32 = 0
const Default_Sighting_Impact uint32 = 0

func (m *Sighting) GetSightingType() uint32 {
	if m != nil && m.SightingType != nil {
		return *m.SightingType
	}
	return Default_Sighting_SightingType
}

func (m *Sighting) GetTimestamp() uint32 {
	if m != nil && m.Timestamp != nil {
		return *m.Timestamp
	}
	return 0
}

func (m *Sighting) GetTimeDelta() uint32 {
	if m != nil && m.TimeDelta != nil {
		return *m.TimeDelta
	}
	return 0
}

func (m *Sighting) GetConfidence() uint32 {
	if m != nil && m.Confidence != nil {
		return *m.Confidence
	}
	return Default_Sighting_Confidence
}

func (m *Sighting) GetImpact() uint32 {
	if m != nil && m.Impact != nil {
		return *m.Impact
	}
	return Default_Sighting_Impact
}

func (m *Sighting) GetDatas() []*ObservationData {
	if m != nil {
		return m.Datas
	}
	return nil
}

func (m *Sighting) GetTestId() uint32 {
	if m != nil && m.TestId != nil {
		return *m.TestId
	}
	return 0
}

func (m *Sighting) GetTestSubId() uint32 {
	if m != nil && m.TestSubId != nil {
		return *m.TestSubId
	}
	return 0
}

type Report struct {
	OrganizationId    []byte `protobuf:"bytes,1,opt,name=organizationId" json:"organizationId,omitempty"`
	SystemId          []byte `protobuf:"bytes,2,opt,name=systemId" json:"systemId,omitempty"`
	SystemIdSecondary []byte `protobuf:"bytes,3,opt,name=systemIdSecondary" json:"systemIdSecondary,omitempty"`
	// See above note about enum vs int.
	// optional SystemType systemType = 4 [ default = SystemTypeUnknown ];
	SystemType       *uint32     `protobuf:"varint,4,opt,name=systemType,def=0" json:"systemType,omitempty"`
	ApplicationId    []byte      `protobuf:"bytes,5,opt,name=applicationId" json:"applicationId,omitempty"`
	UserId           []byte      `protobuf:"bytes,6,opt,name=userId" json:"userId,omitempty"`
	UserIdSecondary  []byte      `protobuf:"bytes,7,opt,name=userIdSecondary" json:"userIdSecondary,omitempty"`
	Sightings        []*Sighting `protobuf:"bytes,8,rep,name=sightings" json:"sightings,omitempty"`
	TimeBase         *uint32     `protobuf:"varint,9,opt,name=timeBase" json:"timeBase,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *Report) Reset()                    { *m = Report{} }
func (m *Report) String() string            { return proto.CompactTextString(m) }
func (*Report) ProtoMessage()               {}
func (*Report) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

const Default_Report_SystemType uint32 = 0

func (m *Report) GetOrganizationId() []byte {
	if m != nil {
		return m.OrganizationId
	}
	return nil
}

func (m *Report) GetSystemId() []byte {
	if m != nil {
		return m.SystemId
	}
	return nil
}

func (m *Report) GetSystemIdSecondary() []byte {
	if m != nil {
		return m.SystemIdSecondary
	}
	return nil
}

func (m *Report) GetSystemType() uint32 {
	if m != nil && m.SystemType != nil {
		return *m.SystemType
	}
	return Default_Report_SystemType
}

func (m *Report) GetApplicationId() []byte {
	if m != nil {
		return m.ApplicationId
	}
	return nil
}

func (m *Report) GetUserId() []byte {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *Report) GetUserIdSecondary() []byte {
	if m != nil {
		return m.UserIdSecondary
	}
	return nil
}

func (m *Report) GetSightings() []*Sighting {
	if m != nil {
		return m.Sightings
	}
	return nil
}

func (m *Report) GetTimeBase() uint32 {
	if m != nil && m.TimeBase != nil {
		return *m.TimeBase
	}
	return 0
}

func init() {
	proto.RegisterType((*ObservationData)(nil), "ObservationData")
	proto.RegisterType((*Sighting)(nil), "Sighting")
	proto.RegisterType((*Report)(nil), "Report")
	proto.RegisterEnum("ObservationData_DataType", ObservationData_DataType_name, ObservationData_DataType_value)
	proto.RegisterEnum("Sighting_SightingType", Sighting_SightingType_name, Sighting_SightingType_value)
	proto.RegisterEnum("Sighting_SightingConfidence", Sighting_SightingConfidence_name, Sighting_SightingConfidence_value)
	proto.RegisterEnum("Sighting_SightingImpact", Sighting_SightingImpact_name, Sighting_SightingImpact_value)
	proto.RegisterEnum("Report_SystemType", Report_SystemType_name, Report_SystemType_value)
}

func init() { proto.RegisterFile("addsec_cti.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1123 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x6c, 0x95, 0x5d, 0x6e, 0x1b, 0x37,
	0x10, 0xc7, 0xb3, 0x92, 0x25, 0xcb, 0x63, 0xd9, 0x1e, 0xd1, 0xb1, 0xbd, 0x4e, 0x9c, 0xc6, 0x51,
	0x93, 0xd4, 0x28, 0x0a, 0x23, 0x09, 0x9a, 0x00, 0xed, 0x9b, 0x3e, 0x52, 0x78, 0x51, 0xcb, 0x11,
	0xb4, 0x49, 0x9a, 0xb7, 0x82, 0xda, 0xa5, 0x6c, 0xc6, 0x5a, 0x52, 0x20, 0x29, 0xb9, 0xca, 0x09,
	0xf2, 0xd0, 0x97, 0x5e, 0xa2, 0x07, 0xe8, 0x05, 0x7a, 0x82, 0x1e, 0xa1, 0x77, 0x29, 0xf6, 0xcb,
	0xcb, 0x55, 0xfa, 0x46, 0xfe, 0xfe, 0xfc, 0xf8, 0xcf, 0xcc, 0x0e, 0x17, 0x90, 0x86, 0xa1, 0x66,
	0xc1, 0xaf, 0x81, 0xe1, 0xa7, 0x33, 0x25, 0x8d, 0x6c, 0xff, 0xb9, 0x0e, 0x3b, 0x6f, 0xc6, 0x9a,
	0xa9, 0x05, 0x35, 0x5c, 0x8a, 0x3e, 0x35, 0x94, 0x3c, 0x80, 0x46, 0x48, 0x0d, 0x7d, 0xbb, 0x9c,
	0x31, 0xd7, 0x39, 0x76, 0x4e, 0xb6, 0x7e, 0x74, 0x9e, 0x8d, 0x6e, 0x11, 0x21, 0xb0, 0x16, 0x8f,
	0xdd, 0xca, 0xb1, 0x73, 0xd2, 0x1c, 0x25, 0x63, 0x82, 0x50, 0x15, 0xf3, 0xc8, 0xad, 0xc6, 0xab,
	0x47, 0xf1, 0xb0, 0xfd, 0x4f, 0x1d, 0x1a, 0xfd, 0x7c, 0xcb, 0x2e, 0xec, 0xe4, 0xe3, 0x77, 0xe2,
	0x5a, 0xc8, 0x1b, 0x81, 0x77, 0x6c, 0x78, 0x46, 0xf5, 0xd5, 0xa0, 0xff, 0x12, 0x1d, 0x72, 0x17,
	0xd0, 0x86, 0xfe, 0x59, 0xe7, 0x39, 0x56, 0xc8, 0x3e, 0x90, 0x15, 0xfa, 0xe2, 0xe5, 0x2b, 0xac,
	0xae, 0x1e, 0xd1, 0xf1, 0x9f, 0xe3, 0xda, 0x97, 0xf0, 0x05, 0xd6, 0xc8, 0x0e, 0x6c, 0xe6, 0xb0,
	0xf7, 0xfe, 0x35, 0xd6, 0xc9, 0x21, 0xec, 0xe5, 0xe0, 0x3d, 0x53, 0x9a, 0x4b, 0xe1, 0x1b, 0xc5,
	0xc5, 0x25, 0xae, 0x93, 0x03, 0xd8, 0xcd, 0xa5, 0x81, 0x0c, 0xd9, 0x34, 0x13, 0x1a, 0xc4, 0x85,
	0xbb, 0xb9, 0xd0, 0xf1, 0xcf, 0xf9, 0x38, 0xdb, 0x88, 0x1b, 0x04, 0xa1, 0x99, 0x2b, 0x3f, 0xf1,
	0x29, 0x43, 0xb0, 0xc9, 0x87, 0x97, 0xcf, 0x7e, 0xc0, 0x4d, 0xfb, 0xd8, 0x98, 0xf8, 0xf3, 0xf1,
	0x47, 0x16, 0x18, 0x6c, 0xda, 0xd1, 0xc5, 0x82, 0xa7, 0xf5, 0x9c, 0x29, 0xdc, 0xb2, 0x73, 0xf1,
	0x4e, 0x33, 0x25, 0x68, 0xc4, 0x70, 0xdb, 0x0e, 0x6f, 0xa8, 0x64, 0xc0, 0xb4, 0xc6, 0x1d, 0x1b,
	0xf6, 0x64, 0x14, 0x51, 0x11, 0x22, 0xda, 0x17, 0x76, 0x66, 0xb3, 0x29, 0x0f, 0x92, 0x12, 0x63,
	0x8b, 0x10, 0xd8, 0xce, 0x85, 0x2c, 0x36, 0x62, 0xb3, 0x8b, 0x79, 0x34, 0x66, 0x0a, 0x77, 0xed,
	0x18, 0xbc, 0xe1, 0xe2, 0x7b, 0xbc, 0xbb, 0x42, 0x5e, 0xe1, 0x9e, 0x4d, 0x86, 0x52, 0x19, 0xdc,
	0x2f, 0x95, 0x50, 0x6a, 0x93, 0xd8, 0x3e, 0xb0, 0x0b, 0x30, 0xe8, 0xf4, 0xd0, 0x25, 0xf7, 0xe1,
	0xa0, 0x48, 0x66, 0x4f, 0x8a, 0xc9, 0x5b, 0x1e, 0x31, 0x6d, 0x68, 0x34, 0xc3, 0xc3, 0x72, 0xa6,
	0xfb, 0x6c, 0x92, 0x67, 0xfa, 0x9e, 0x7d, 0xdf, 0xd9, 0xf0, 0xe7, 0x21, 0xde, 0xb7, 0xc3, 0x7c,
	0xcf, 0x44, 0x28, 0xd5, 0x88, 0x4d, 0xbc, 0x3e, 0x1e, 0x91, 0x3d, 0x68, 0xe5, 0xc2, 0x6b, 0xb1,
	0xc8, 0x22, 0x7d, 0x60, 0x9f, 0xed, 0x2f, 0xa3, 0xb1, 0xcc, 0xeb, 0xfb, 0x95, 0xad, 0x0c, 0x95,
	0x9c, 0x31, 0x65, 0x96, 0x17, 0xb1, 0xfb, 0x87, 0x76, 0x7e, 0xcf, 0xf9, 0x58, 0x51, 0xb5, 0xc4,
	0x63, 0xdb, 0x8a, 0xef, 0x7b, 0x7d, 0x7c, 0x44, 0x5a, 0xb0, 0x95, 0x93, 0x6e, 0x82, 0xda, 0x76,
	0x36, 0xfc, 0xa5, 0x36, 0x2c, 0xf2, 0xfa, 0xf8, 0xb5, 0xfd, 0xf5, 0x5d, 0x50, 0xc3, 0x17, 0x6c,
	0x28, 0xb9, 0x30, 0x4c, 0xe1, 0x63, 0xdb, 0x75, 0x2a, 0x79, 0xc2, 0xe0, 0x93, 0xf6, 0xbf, 0x75,
	0x68, 0xf8, 0xfc, 0xf2, 0xca, 0x70, 0x71, 0x49, 0x9e, 0x40, 0x53, 0x67, 0xe3, 0x72, 0x97, 0x96,
	0x30, 0x39, 0x82, 0x0d, 0x93, 0x27, 0x35, 0x69, 0xd7, 0xad, 0x51, 0x01, 0x72, 0xb5, 0xcf, 0xa6,
	0x86, 0xba, 0x8d, 0x42, 0x4d, 0x00, 0x79, 0x04, 0x10, 0x48, 0x31, 0xe1, 0x21, 0x13, 0x01, 0x4b,
	0x1b, 0x3b, 0xbe, 0xc0, 0x82, 0xe4, 0x10, 0xea, 0x3c, 0x9a, 0xd1, 0xc0, 0xb8, 0x6b, 0xb9, 0x9c,
	0x01, 0xf2, 0x14, 0x6a, 0xf1, 0xbb, 0xa0, 0xdd, 0xda, 0x71, 0xf5, 0x64, 0xf3, 0x05, 0x9e, 0xae,
	0xbc, 0x31, 0xa3, 0x54, 0x26, 0xfb, 0x50, 0x37, 0x4c, 0x1b, 0x2f, 0x74, 0xeb, 0x89, 0x81, 0x6c,
	0x96, 0x78, 0x63, 0xda, 0xf8, 0xf3, 0xb1, 0x17, 0xba, 0xeb, 0x99, 0xb7, 0x1c, 0xb4, 0xff, 0xaa,
	0x40, 0xd3, 0xb7, 0x03, 0x3d, 0x80, 0x5d, 0x7b, 0x5e, 0xbc, 0x31, 0x0f, 0xe0, 0xd0, 0x16, 0x3c,
	0x31, 0x91, 0x2a, 0x4a, 0x5c, 0xd0, 0x29, 0x3a, 0xe4, 0x09, 0x3c, 0xb2, 0xe5, 0xb4, 0x40, 0xbd,
	0x2b, 0xaa, 0x68, 0x60, 0x98, 0xe2, 0xda, 0xf0, 0x40, 0x63, 0x85, 0x7c, 0x0b, 0x4f, 0xed, 0x65,
	0x56, 0x33, 0xad, 0xae, 0xad, 0x92, 0x63, 0x38, 0xb2, 0xd7, 0x0e, 0xe8, 0xf4, 0x86, 0x2a, 0xd6,
	0x51, 0x86, 0x4f, 0x68, 0x60, 0x34, 0xae, 0xad, 0x7a, 0xba, 0x60, 0xe6, 0x46, 0xaa, 0xeb, 0x8e,
	0x31, 0x34, 0xb8, 0xc6, 0x1a, 0x39, 0x02, 0xb7, 0x14, 0x8b, 0x66, 0xaa, 0xcb, 0xae, 0xe8, 0x82,
	0x4b, 0x85, 0x75, 0x72, 0x0f, 0xf6, 0x6d, 0xb5, 0x27, 0xa3, 0xd9, 0x94, 0x53, 0x11, 0x30, 0x5c,
	0x5f, 0xdd, 0xd9, 0x9b, 0x6b, 0x23, 0x23, 0xa6, 0xe2, 0x7c, 0x63, 0xa3, 0xfd, 0xd9, 0x01, 0x92,
	0xcb, 0xbd, 0xa2, 0x88, 0x96, 0x9b, 0x82, 0x16, 0x09, 0x3c, 0x84, 0xbd, 0x2f, 0xe5, 0x73, 0x79,
	0x83, 0x8e, 0x7d, 0x5d, 0x21, 0x0d, 0x58, 0xc8, 0xe7, 0x11, 0x56, 0x6c, 0xa3, 0x85, 0x7a, 0xc6,
	0x2f, 0xaf, 0xb0, 0xda, 0xfe, 0xc3, 0x81, 0xed, 0x5c, 0xf4, 0xd2, 0x0f, 0xc6, 0xba, 0x27, 0x25,
	0x85, 0x85, 0xfd, 0xc2, 0x77, 0x2a, 0x5d, 0x48, 0xc1, 0xd0, 0xb1, 0x8b, 0x9e, 0xf2, 0x01, 0x17,
	0x52, 0x95, 0xaf, 0xce, 0x04, 0x19, 0x32, 0x45, 0x0d, 0xc3, 0xea, 0xff, 0x6c, 0xa2, 0x1f, 0xa5,
	0xc2, 0xb5, 0xf6, 0xef, 0x35, 0xa8, 0x8f, 0xd8, 0x4c, 0xaa, 0xf8, 0xe3, 0xdd, 0x96, 0xea, 0x92,
	0x0a, 0xfe, 0x29, 0xa9, 0xb1, 0x17, 0x26, 0xfd, 0xd5, 0x1c, 0xad, 0x50, 0x72, 0x0f, 0x1a, 0x3a,
	0x6d, 0xe9, 0x30, 0xfb, 0x19, 0xde, 0xce, 0xc9, 0x77, 0xd0, 0xca, 0xc7, 0x3e, 0x0b, 0xa4, 0x08,
	0xa9, 0x5a, 0x26, 0x5d, 0xd4, 0x1c, 0x7d, 0x29, 0xc4, 0xcd, 0x96, 0xc2, 0xa4, 0x9b, 0x6f, 0xbb,
	0xc9, 0x82, 0xe4, 0x31, 0x6c, 0xd1, 0xe2, 0xbb, 0xf3, 0x42, 0xb7, 0x96, 0x1c, 0x56, 0x86, 0x71,
	0x3f, 0xcd, 0x35, 0x53, 0x59, 0x3f, 0x35, 0x47, 0xd9, 0x8c, 0x9c, 0xc0, 0x4e, 0x3a, 0x2a, 0xcc,
	0xac, 0x27, 0x0b, 0x56, 0x31, 0xf9, 0x06, 0x36, 0xf2, 0x37, 0x44, 0xbb, 0x8d, 0xa4, 0x7b, 0x37,
	0x4e, 0xf3, 0x94, 0x8d, 0x0a, 0x2d, 0x8e, 0x3e, 0x7e, 0x2d, 0xba, 0x54, 0x33, 0x77, 0x23, 0xe9,
	0xd0, 0xdb, 0x79, 0xfb, 0xef, 0x0a, 0x80, 0x5f, 0x78, 0xdf, 0x83, 0x56, 0x31, 0x2b, 0x0a, 0xdb,
	0x82, 0xad, 0x02, 0x7b, 0x6f, 0x7c, 0x74, 0xca, 0x2b, 0x3b, 0x22, 0x54, 0x92, 0x87, 0x58, 0x89,
	0xff, 0x15, 0x05, 0xfe, 0x85, 0x8b, 0x50, 0xde, 0xe8, 0x81, 0x1c, 0xc7, 0x7f, 0xda, 0x6a, 0xfc,
	0x6a, 0x17, 0x62, 0x77, 0x4a, 0x83, 0xeb, 0x31, 0x53, 0x6a, 0x89, 0x6b, 0xc9, 0x87, 0x50, 0x9c,
	0x16, 0xd1, 0x4f, 0x52, 0x64, 0xbb, 0x6a, 0xe5, 0xcb, 0xdf, 0xf8, 0x1f, 0xb0, 0x1e, 0x3f, 0xf2,
	0x05, 0x3a, 0xe7, 0x62, 0xfe, 0x1b, 0xae, 0x97, 0x1d, 0x65, 0x57, 0x63, 0xa3, 0xbc, 0xbd, 0xeb,
	0xf7, 0x71, 0xa3, 0x6c, 0xf2, 0x75, 0x34, 0x66, 0x61, 0xc8, 0xc2, 0xf4, 0x18, 0x58, 0x8d, 0xf5,
	0x2d, 0x6e, 0x96, 0xd7, 0x67, 0xaf, 0x40, 0x9f, 0x2d, 0x78, 0xc0, 0xb0, 0xd9, 0x7d, 0x08, 0x6e,
	0x20, 0xa3, 0x53, 0x1a, 0x86, 0x3c, 0x2e, 0xad, 0x66, 0xc1, 0x5c, 0x71, 0xb3, 0x3c, 0x0d, 0x0c,
	0x3f, 0x73, 0x3e, 0x3b, 0x77, 0xfe, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x21, 0xcf, 0xf3, 0x9c, 0xcb,
	0x09, 0x00, 0x00,
}
